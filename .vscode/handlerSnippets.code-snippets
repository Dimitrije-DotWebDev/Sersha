{
	"Query Handler": {
		"prefix": "qhandler",
		"body": [
		  "public class Query: IRequest<${1:ReturnObject}>{}",
		  "",
		  "        public class Handler : IRequestHandler<Query, ${1:ReturnObject}>",
		  "        {",
		  "            private readonly DataContext _context;",
		  "            private readonly ILogger<List> _logger;",
		  "",
		  "        public ILogger<List> Logger { get;set; }",
		  "",
		  "            public Handler(DataContext context, ILogger<List> logger)",
		  "            {",
		  "                _logger = logger;",
		  "                _context = context;",
		  "            }",
		  "",
		  "",
		  "            public async Task<${1:ReturnObject}> Handle(Query request, CancellationToken cancellationToken)",
		  "            {",
		  "                try",
		  "                {",
		  "                    ",
		  "                    cancellationToken.ThrowIfCancellationRequested();",
		  "                    await Task.Delay(100, cancellationToken);",
		  "                    _logger.LogInformation($\"Task has completed\");",
		  "                    ",
		  "                }",
		  "                catch(Exception ex) when (ex is TaskCanceledException)",
		  "                {",
		  "                    _logger.LogInformation(\"Task was cancelled\");",
		  "                }",
		  "",
		  "                //handler logic goes here",
		  "                ",
		  "            }",
		  "        }"
		],
		"description": "Query Handler"
	  },
	  "Command Handler": {
		"prefix": "chandler",
		"body": [
		  "public class Command: IRequest",
		  "         {",
		  "           ",
		  "         }",
		  "",
		  "        public class Handler : IRequestHandler<Command>",
		  "        {",
		  "            private readonly DataContext _context;",
		  "",
		  "",
		  "            public Handler(DataContext context)",
		  "            {",
		  "                _context = context;",
		  "            }",
		  "",
		  "",
		  "            public async Task<Unit> Handle(Command request, CancellationToken cancellationToken)",
		  "            {",
		  "                //handler logic ",
		  "                var success = await _context.SaveChangesAsync() > 0 ;",
		  "",
		  "                if(success) return Unit.Value;",
		  "                throw new Exception(\"Problem saving changes!\");",
		  "            }",
		  "        }"
		],
		"description": "Command Handler"
	  }
}